c
response
c
response.code
c
response = Net::HTTP.get_response(uri)
c
JSON.parse(response.body)['message']
JSON.parse(response.body)
response.body
response
c
r.params
c
request['Content-Type'] = 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'
c
request['Content-Type'] = ''
request
c
file_contents
request.body
r.params
c
JSON.parse(response.body).count
JSON.parse(response.body)['id']
JSON.parse(response.body)
JSON.parse(response.body)[:id]
JSON.parse(response.body).id
JSON.parse(response.body)
c
JSON.parse(response.body)
c
JSON.parse(response.body)['count']
JSON.parse(response.body)
response.body
response
c
response.code
response.status
response
response.status
response.
response.ok
response.header
response.body
response
response.status
response.ok
response.ok?
last_response
JSON.parse(response.body)
response.body
response
c
get
get 'summary'
c
get ('summary')
get 'summary'
get
get 'summary'
get '/summary'
c
get '/summary'
c
app
c
generate_csrf_token
csrf_token()
A
csrf_token()
c
csrf
c
csrf_token()
c
csrf_token()
csrf
c
plugin :route_csrf
rack.session
rack.sessopn
roda.session
session[:csrf_token]
Sessions
Session
plugin :sessions
c
decrypted_data
decrypted_data = decrypt_file(encrypted_data)
c
decrypted_data
c
decrypted_data
c
record
c
x
clients.by_pk(record[:id]).one.nil?
clients.by_pk(record[:id]).one!
clients.by_pk(record[:id]).one
clients.by_pk(record[:id]).one!
clients.by_pk(record[:id]).one?
record
!clients.by_pk(record[:id]).one
!clients.by_pk(record[:id]).one?
!clients.by_pk(record[:id]).empty?
c
clients.by_pk(record[:id]).changeset(:update, record).commit
record
c
record[:id]
record.count
record = clients.by_pk(record[:id])
c
